#!/usr/bin/env bash

set -e

script="$(readlink -fm "$0")"
script_dir="$(dirname "${script}")"
script_root="$(dirname "${script%/*/*}")"

source ${script_root}/pkgconfig-lib.sh
source ${script_root}/versions.sh
source ${script_root}/command_line.sh

function main {

    # Overall prefix must be supplied by command line

    local install_root=${prefix}/libs/parmetis/${PARMETIS_VERSION}

    parmetisBuildCray ${install_root}
    parmetisBuildGnu  ${install_root}
    parmetisBuildAocc ${install_root}

    parmetisInstallModuleFile
    parmetisInstallationTest
}

function parmetisBuildAocc {

    local install_root=${1}
    
    # buildVersion AOCC 2.1
    module -s restore PrgEnv-aocc

    moduleUseLibs
    module load metis/${METIS_VERSION}

    amd_version=2.1
    amd_root=${install_root}/AOCC
    amd_prefix=${amd_root}/${amd_version}

    parmetisBuild ${amd_prefix}
}

function parmetisBuildCray {

    local install_root=${1}

    # buildVersion CRAYCLANG 10.0
    module -s restore PrgEnv-cray

    moduleUseLibs
    module load metis/${METIS_VERSION}
    
    cray_version=10.0
    cray_root=${install_root}/CRAYCLANG
    cray_prefix=${cray_root}/${cray_version}

    parmetisBuild ${cray_prefix}
}

function parmetisBuildGnu {    

    local install_root=${1}

    # buildVersion GNU 9.3
    module -s restore PrgEnv-gnu
    module swap gcc gcc/9.3.0

    moduleUseLibs
    module load metis/${METIS_VERSION}
    
    gnu_version=9.3
    gnu_root=${install_root}/GNU
    gnu_prefix=${gnu_root}/${gnu_version}

    parmetisBuild ${gnu_prefix}
}

function parmetisBuild {

    local prefix=${1}
    
    # Build OpenMP first and then MPI (prevents clobbering serial version)
    parmetisClean
    parmetisBuildMPIOpenMP ${prefix}
    parmetisClean
    parmetisBuildMPI ${prefix}

    parmetisPackageConfigFiles ${prefix}
}

# Remove any existing build directories

function parmetisClean {
    rm -rf parmetis-${METIS_VERSION}
}

function parmetisBuildMPI {

    # libparmetis.a is generated

    local prefix=${1}

    ./sh/tpsl/parmetis.sh --jobs=16 --prefix=${prefix} --modules

    local pe=$(peEnvLower)
    local newname=libparmetis_${pe}_mpi.a

    mv ${prefix}/lib/libparmetis.a ${prefix}/lib/${newname}
    ccSharedFromStatic ${prefix}/lib parmetis_${pe}_mpi
}

function parmetisBuildMPIOpenMP {

    # libparmetis.a is generated by build

    local prefix=${1}

    local pe=$(peEnvLower)
    local newname=libparmetis_${pe}_mpi_mp.a

    ./sh/tpsl/parmetis.sh --jobs=16 --prefix=${prefix} --openmp --modules
    mv ${prefix}/lib/libparmetis.a ${prefix}/lib/${newname}
    ccSharedFromStatic ${prefix}/lib parmetis_${pe}_mpi_mp
}

function parmetisPackageConfigFiles {

    # Here we declare the necessary information required to generate
    # pkgconfig files
    
    local prefix=${1}
    local prgEnv=$(peEnvUpper)
    
    declare -A pcmap
    pcmap[name]="parmetis"
    pcmap[version]=${PARMETIS_VERSION}
    pcmap[description]="parmetis library for ${prgEnv}"
    pcmap[has_openmp]=1

    pcPackageConfigFiles ${prefix} pcmap
}

function parmetisInstallModuleFile {

    local module_template=${script_dir}/modulefile.tcl

    # Destination
    local module_dir=$(moduleInstallDirectory)

    if [[ ! -d ${module_dir}/parmetis ]]; then
	mkdir ${module_dir}/parmetis
    fi

    local module_file=${module_dir}/parmetis/${PARMETIS_VERSION}

    # Copy add update the template
    cp ${module_template} ${module_file}
    sed -i "s%TEMPLATE_INSTALL_ROOT%${prefix}%" ${module_file}
    sed -i "s%TEMPLATE_PARMETIS_VERSION%${PARMETIS_VERSION}%" ${module_file}
    sed -i "s%TEMPLATE_METIS_VERSION%${METIS_VERSION}%" ${module_file}

    # Ensure this has worked
    module use ${module_dir}
    module load parmetis/${PARMETIS_VERSION}
    module unload parmetis

}

function parmetisInstallationTest {

    cd archer2/tpsl/parmetis
    parmetisTest PrgEnv-cray
    parmetisTest PrgEnv-gnu
    parmetisTest PrgEnv-aocc
    cd -

}

function parmetisTest {

    local prgenv=${1}
    local module_use=$(moduleInstallDirectory)

    printf "Parmetis test for %s\n" "${prgenv}"
    module -s restore ${prgenv}
    module use ${module_use}

    module load parmetis/${PARMETIS_VERSION}

    cc parmetis-install.c

    slurmAllocRun "srun -n 3 ./a.out"
}

main
