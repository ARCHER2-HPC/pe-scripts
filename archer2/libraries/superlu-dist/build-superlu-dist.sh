#!/usr/bin/env bash

set -e

script="$(readlink -fm "$0")"
script_dir="$(dirname "${script}")"
script_root="$(dirname "${script%/*/*}")"

source ${script_root}/pkgconfig-lib.sh
source ${script_root}/versions.sh
source ${script_root}/command_line.sh

function main {

    # Overall prefix must be supplied by command line

    local install_root=${prefix}/libs/superlu-dist/${SUPERLUDIST_VERSION}

    superludistBuildAocc ${install_root}
    superludistBuildCray ${install_root}
    superludistBuildGnu  ${install_root}
    
    superludistInstallModuleFile
    superludistInstallationTest

    printf "Test and installation of SuperLU_DIST complete\n"
}

function superludistBuildAocc {

    local install_root=${1}
    
    # buildVersion AOCC 2.1
    module -s restore PrgEnv-aocc

    moduleUseLibs
    module load parmetis/${PARMETIS_VERSION}
    module list

    amd_version=2.1
    amd_root=${install_root}/AOCC
    amd_prefix=${amd_root}/${amd_version}

    superludistBuild ${amd_prefix}
}

function superludistBuildCray {

    local install_root=${1}

    # buildVersion CRAYCLANG 10.0
    module -s restore PrgEnv-cray

    moduleUseLibs
    module load parmetis/${PARMETIS_VERSION}
    module list

    cray_version=10.0
    cray_root=${install_root}/CRAYCLANG
    cray_prefix=${cray_root}/${cray_version}

    superludistBuild ${cray_prefix}
}

function superludistBuildGnu {    

    local install_root=${1}

    # buildVersion GNU 9.3
    module -s restore PrgEnv-gnu
    module swap gcc gcc/9.3.0

    moduleUseLibs
    module load parmetis/${PARMETIS_VERSION}
    module list

    gnu_version=9.3
    gnu_root=${install_root}/GNU
    gnu_prefix=${gnu_root}/${gnu_version}

    superludistBuild ${gnu_prefix}
}

function superludistBuild {

    local prefix=${1}
    
    # Build OpenMP first and then MPI (prevents clobbering serial version)
    superludistClean
    superludistBuildMPIOpenMP ${prefix}
    superludistClean
    superludistBuildMPI ${prefix}

    superludistPackageConfigFiles ${prefix}

    # Remove any shared objects from the package config stage
    # ... as we are not having any at the moment.
    rm  ${prefix}/lib/*.so

}

function superludistClean {

    rm -rf superlu_dist-${SUPERLUDIST_VERSION}

}

function superludistBuildMPI {

    # libsuperlu_dist.a is generated

    local prefix=${1}

    ./sh/tpsl/superlu-dist.sh --jobs=16 --prefix=${prefix} --modules \
			      --version=${SUPERLUDIST_VERSION}

    local pe=$(peEnvLower)
    local newname=libsuperlu_dist_${pe}_mpi.a

    mv ${prefix}/lib/libsuperlu_dist.a ${prefix}/lib/${newname}
    ccSharedFromStatic ${prefix}/lib superlu_dist_${pe}_mpi
}

function superludistBuildMPIOpenMP {

    # libsuperlu_dist.a is generated by build

    local prefix=${1}

    local pe=$(peEnvLower)
    local newname=libsuperlu_dist_${pe}_mpi_mp.a

    ./sh/tpsl/superlu-dist.sh --jobs=16 --prefix=${prefix} --openmp --modules \
			      --version=${SUPERLUDIST_VERSION}

    mv ${prefix}/lib/libsuperlu_dist.a ${prefix}/lib/${newname}
    ccSharedFromStatic ${prefix}/lib superlu_dist_${pe}_mpi_mp
}

function superludistPackageConfigFiles {

    # Here we declare the necessary information required to generate
    # pkgconfig files
    
    local prefix=${1}
    local prgEnv=$(peEnvLower)

    # SuperLU_DIST produces its own superlu_dist.pc file
    # which we need to remove before installing our own.
    rm -f ${prefix}/lib/pkgconfig/superlu_dist.pc

    # Additional -lstdc++ required in all PrgEnv
    
    declare -A pcmap
    pcmap[name]="superlu_dist"
    pcmap[version]=${SUPERLUDIST_VERSION}
    pcmap[description]="SuperLU_DIST library for ${prgEnv} compiler"
    pcmap[has_openmp]=1
    pcmap[extra_libs]="-lstdc++"
    pcmap[requires]="superlu_dist_${prgEnv}_mpi"

    pcRefactorPackageConfigFiles ${prefix} pcmap
    pcFileWriteOverallPackageFile "${prefix}/lib/pkgconfig/superlu_dist.pc" pcmap
}

function superludistInstallModuleFile {

    local module_template=${script_dir}/modulefile.tcl

    # Destination
    local module_dir=$(moduleInstallDirectory)
    local time_stamp=$(date)

    if [[ ! -d ${module_dir}/superlu-dist ]]; then
	mkdir ${module_dir}/superlu-dist
    fi

    local module_file=${module_dir}/superlu-dist/${SUPERLUDIST_VERSION}

    # Copy add update the template
    cp ${module_template} ${module_file}
    sed -i "s%TEMPLATE_INSTALL_ROOT%${prefix}%" ${module_file}
    sed -i "s%TEMPLATE_SUPERLUDIST_VERSION%${SUPERLUDIST_VERSION}%" ${module_file}
    sed -i "s%TEMPLATE_PARMETIS_VERSION%${PARMETIS_VERSION}%" ${module_file}
    sed -i "s%TEMPLATE_TIMESTAMP%${time_stamp}%" ${module_file}

    # Ensure this has worked
    module use ${module_dir}
    module load superlu-dist/${SUPERLUDIST_VERSION}
    module unload superlu-dist

}

function superludistInstallationTest {

    superludistTest PrgEnv-cray
    superludistTest PrgEnv-gnu
    superludistTest PrgEnv-aocc

}

function superludistTest {

    local prgenv=${1}
    local module_use=$(moduleInstallDirectory)
    local version="${SUPERLUDIST_VERSION}"

    printf "SuperLU test for %s\n" "${prgenv}"
    module -s restore ${prgenv}
    module use ${module_use}

    module load superlu-dist/${version}
    module list

    # Run standard examples with the distribution with a doctored
    # Makefile
    
    superludistClean
    tar xf v${version}.tar.gz

    cd superlu_dist-${version}/EXAMPLE

    cp ${script_dir}/make.inc ../make.inc
    make

    slurmAllocRun "srun -n 4 pddrive -r 2 -c 2 g20.rua"
    slurmAllocRun "srun -n 10 pddrive4 g20.rua"
    slurmAllocRun "srun -n 4 pzdrive -r 2 -c 2 cg20.cua"
    slurmAllocRun "srun -n 10 pzdrive4 cg20.cua"

    make clean

    cp ${script_dir}/make_omp.inc ../make.inc
    make

    export OMP_NUM_THREADS=2

    slurmAllocRun "srun -n 4 pddrive -r 2 -c 2 g20.rua"
    slurmAllocRun "srun -n 10 pddrive4 g20.rua"
    slurmAllocRun "srun -n 4 pzdrive -r 2 -c 2 cg20.cua"
    slurmAllocRun "srun -n 10 pzdrive4 cg20.cua"    

    cd -
}

main
