#!/usr/bin/env bash

set -e

script="$(readlink -fm "$0")"
script_dir="$(dirname "${script}")"
script_root="$(dirname "${script%/*/*}")"

source ${script_root}/pkgconfig-lib.sh
source ${script_root}/versions.sh
source ${script_root}/command_line.sh

function main {

    # Overall prefix must be supplied by command line

    local install_root=${prefix}/libs/scotch/${SCOTCH_VERSION}

    #scotchBuildAocc ${install_root}
    scotchBuildCray ${install_root}
    #scotchBuildGnu  ${install_root}
    
    scotchInstallModuleFile
    scotchInstallationTest
}

function scotchBuildAocc {

    local install_root=${1}
    
    # buildVersion AOCC 2.1
    module -s restore PrgEnv-aocc

    amd_version=2.1
    amd_root=${install_root}/AOCC
    amd_prefix=${amd_root}/${amd_version}

    scotchBuild ${amd_prefix}
}

function scotchBuildCray {

    local install_root=${1}

    # buildVersion CRAYCLANG 10.0
    module -s restore PrgEnv-cray
    
    cray_version=10.0
    cray_root=${install_root}/CRAYCLANG
    cray_prefix=${cray_root}/${cray_version}

    scotchBuild ${cray_prefix}
}

function scotchBuildGnu {    

    local install_root=${1}

    # buildVersion GNU 9.3
    module -s restore PrgEnv-gnu
    module swap gcc gcc/9.3.0

    gnu_version=9.3
    gnu_root=${install_root}/GNU
    gnu_prefix=${gnu_root}/${gnu_version}

    scotchBuild ${gnu_prefix}
}

function scotchBuild {

    local prefix=${1}
    
    # The single build produces both serial and MPI versions.

    scotchClean
    scotchBuildMPI ${prefix}

    scotchPackageConfigFiles ${prefix}
}

function scotchClean {

    rm -rf scotch_${SCOTCH_VERSION}

}

function scotchBuildMPI {

    # The following libraries are generated by the build:
    # libesmumps.a             libptesmumps.a
    # libscotch.a              libptscotch.a
    # libscotcherr.a           libptscotcherr.a
    # libscotcherrexit.a       libptscotcherrexit.a
    # libscotchmetis.a         libscotchparmetis.a

    local prefix=${1}

    ./sh/tpsl/scotch.sh --jobs=16 --prefix=${prefix}

    local pe=$(peEnvLower)
    local prefixlib="${prefix}/lib"

    for lib in scotch scotcherr scotcherrexit scotchmetis; do
      mv ${prefixlib}/lib${lib}.a ${prefixlib}/lib${lib}_${pe}.a
      ccSharedFromStatic ${prefixlib} ${lib}_${pe}
    done

    for lib in ptscotch ptscotcherr ptscotcherrexit ptscotchparmetis; do
      mv ${prefixlib}/lib${lib}.a ${prefixlib}/lib${lib}_${pe}.a
      ccSharedFromStatic ${prefixlib} ${lib}_${pe}
    done

    for lib in esmumps ptesmumps; do
      mv ${prefixlib}/lib${lib}.a ${prefixlib}/lib${lib}_${pe}.a
      ccSharedFromStatic ${prefixlib} ${lib}_${pe}
    done

}

function scotchPackageConfigFiles {

    # Here we declare the necessary information required to generate
    # pkgconfig files
    
    local prefix=${1}
    local prgEnv=$(peEnvUpper)

    declare -A pcmap
    pcmap[name]="scotch"
    pcmap[version]=${SCOTCH_VERSION}
    pcmap[description]="Scotch library for ${prgEnv}"
    pcmap[has_openmp]=0
    
    pcPackageConfigFiles ${prefix} pcmap
}

function scotchInstallModuleFile {

    local module_template=${script_dir}/modulefile.tcl

    # Destination
    local module_dir=$(moduleInstallDirectory)

    if [[ ! -d ${module_dir}/scotch ]]; then
	mkdir ${module_dir}/scotch
    fi

    local module_file=${module_dir}/scotch/${SCOTCH_VERSION}

    # Copy add update the template
    cp ${module_template} ${module_file}
    sed -i "s%TEMPLATE_INSTALL_ROOT%${prefix}%" ${module_file}
    sed -i "s%TEMPLATE_SCOTCH_VERSION%${SCOTCH_VERSION}%" ${module_file}


    # Ensure this has worked
    module use ${module_dir}
    module load scotch/${SCOTCH_VERSION}
    module unload scotch

}

function scotchInstallationTest {

    scotchTest PrgEnv-cray
    scotchTest PrgEnv-gnu
    scotchTest PrgEnv-aocc

}

function scotchTest {

    local prgenv=${1}
    local module_use=$(moduleInstallDirectory)
    local version="${SCOTCH_VERSION}"
    
    printf "Scotch test for %s\n" "${prgenv}"
    module -s restore ${prgenv}
    module use ${module_use}

    module load scotch/${version}

    #scotchClean
    printf "Scotch test here please\n"

}

main
