#!/usr/bin/env bash

set -e

script="$(readlink -fm "$0")"
script_dir="$(dirname "${script}")"
script_root="$(dirname "${script%/*/*}")"

source ${script_root}/pkgconfig-lib.sh
source ${script_root}/versions.sh
source ${script_root}/command_line.sh

function main {

    # Overall prefix must be supplied by command line

    local install_root=${prefix}/libs/scotch/${SCOTCH_VERSION}

    ${build_amd} && scotchBuildAocc ${install_root}
    ${build_cce} && scotchBuildCray ${install_root}
    ${build_gnu} && scotchBuildGnu  ${install_root}
    
    scotchInstallModuleFile
    scotchInstallationTest ${install_root}

    printf "ARCHER2: Scotch installation test completed successfully\n"
}

function scotchBuildAocc {

    local install_root=${1}
    
    # Restore relevant PE/Compiler
    module restore $(moduleCollection PrgEnv-aocc)
    module swap aocc aocc/${PE_AOCC_AOCC_VERSION}
    module list

    amd_version=$(moduleToCompilerMajorMinor)
    amd_root=${install_root}/AOCC
    amd_prefix=${amd_root}/${amd_version}

    scotchBuild ${amd_prefix}
}

function scotchBuildCray {

    local install_root=${1}

    module restore $(moduleCollection PrgEnv-cray)
    module swap cce cce/${PE_CRAY_CCE_VERSION}
    module list

    cray_version=$(moduleToCompilerMajorMinor)
    cray_root=${install_root}/CRAYCLANG
    cray_prefix=${cray_root}/${cray_version}

    scotchBuild ${cray_prefix}
}

function scotchBuildGnu {    

    local install_root=${1}

    module restore $(moduleCollection PrgEnv-gnu)
    module swap gcc gcc/${PE_GNU_GCC_VERSION}
    module list

    gnu_version=$(moduleToCompilerMajorMinor)
    gnu_root=${install_root}/GNU
    gnu_prefix=${gnu_root}/${gnu_version}

    scotchBuild ${gnu_prefix}
}

function scotchBuild {

    local prefix=${1}
    
    # The single build produces both serial and MPI versions.

    scotchClean
    scotchBuildMPI ${prefix}

    scotchPackageConfigFiles ${prefix}

    # At the moment we are removing any shared objects as we haven't
    # got all the correct names/run time behaviour.
    rm ${prefix}/lib/*.so
}

function scotchClean {

    rm -rf scotch_${SCOTCH_VERSION}

}

function scotchBuildMPI {

    # The following libraries are generated by the build:
    # libesmumps.a             libptesmumps.a
    # libscotch.a              libptscotch.a
    # libscotcherr.a           libptscotcherr.a
    # libscotcherrexit.a       libptscotcherrexit.a
    # libscotchmetis.a         libscotchparmetis.a

    local prefix=${1}

    ./sh/tpsl/scotch.sh --jobs=16 --prefix=${prefix} --version=${SCOTCH_VERSION}

    local pe=$(peEnvLower)
    local prefixlib="${prefix}/lib"

    # Postfix ${pe}_mpi

    for lib in scotch scotcherr scotchmetis esmumps; do
      mv ${prefixlib}/lib${lib}.a ${prefixlib}/lib${lib}_${pe}.a
      ccSharedFromStatic ${prefixlib} ${lib}_${pe}
    done

    for lib in ptscotch ptscotcherr ptscotchparmetis ptesmumps; do
      mv ${prefixlib}/lib${lib}.a ${prefixlib}/lib${lib}_${pe}_mpi.a
      ccSharedFromStatic ${prefixlib} ${lib}_${pe}_mpi
    done
}

function scotchPackageConfigFiles {

    # Here we declare the necessary information required to generate
    # pkgconfig files

    local prefix=${1}
    local prgEnv=$(peEnvLower)
    local ext="${prgEnv}"
    local extmpi="${prgEnv}_mpi"
    
    declare -A pcmap
    pcmap[name]="scotch"
    pcmap[version]=${SCOTCH_VERSION}
    pcmap[description]="Scotch library for ${prgEnv} compiler"
    pcmap[has_openmp]=0
    pcmap[extra_libs]=""

    if [[ "${prgEnv}" == "aocc" ]]; then
	pcmap[extra_libs]="-lm"
    fi

    # We are not going to include libscotcherrexit here, as this
    # changes the behaviour of any executable encountering errors
    # (e.g., the tests) if it appears in the pkgconfig.
    # Order is important

    pcmap[requires]="esmumps_${ext} ptesmumps_${extmpi} ptscotchparmetis_${extmpi} ptscotch_${extmpi} ptscotcherr_${extmpi} scotchmetis_${ext} scotch_${ext} scotcherr_${ext}"

    pcRefactorPackageConfigFiles ${prefix} pcmap
    pcFileWriteOverallPackageFile "${prefix}/lib/pkgconfig/scotch.pc" pcmap
}

function scotchInstallModuleFile {

    local module_template=${script_dir}/modulefile.tcl

    # Destination
    local module_dir=$(moduleInstallDirectory)
    local time_stamp=$(date)

    if [[ ! -d ${module_dir}/scotch ]]; then
	mkdir ${module_dir}/scotch
    fi

    local module_file=${module_dir}/scotch/${SCOTCH_VERSION}

    # Copy add update the template
    cp ${module_template} ${module_file}
    sed -i "s%TEMPLATE_INSTALL_ROOT%${prefix}%" ${module_file}
    sed -i "s%TEMPLATE_SCOTCH_VERSION%${SCOTCH_VERSION}%" ${module_file}
    sed -i "s%TEMPLATE_TIMESTAMP%${time_stamp}%" ${module_file}

    # Ensure this has worked
    module use ${module_dir}
    module load scotch/${SCOTCH_VERSION}
    module unload scotch

}

function scotchInstallationTest {

    ${test_cee} && scotchTest PrgEnv-cray
    ${test_gnu} && scotchTest PrgEnv-gnu
    ${test_amd} && scotchTest PrgEnv-aocc

}

function scotchTest {

    local prgenv=${1}
    local module_use=$(moduleInstallDirectory)
    local version="${SCOTCH_VERSION}"

    printf "Scotch test for %s\n" "${prgenv}"
    module restore $(moduleCollection ${prgenv})
    module use ${module_use}

    module load scotch/${version}
    printf "SCOTCH_DIR: %s\n" "${SCOTCH_DIR}"

    scotchClean
    tar xf scotch_${version}.tar.gz

    # More-or-less the standard scotch "make check" and "ptcheck"
    cd scotch_${version}/src/check

    # Copy our doctored Makefile

    cp ${script_dir}/Makefile.check Makefile

    # Require the scotch metis.h
    cp ../libscotchmetis/library_metis.h metis.h

    # Sort out test_libmetis.c, which we want to look for SCOTCH_METIS_*,
    # and not METIS_*
    sed -i 's/METIS_PartGraphKway/SCOTCH_METIS_PartGraphKway/' test_libmetis.c
    sed -i 's/METIS_PartGraphRecursive/SCOTCH_METIS_PartGraphRecursive/' test_libmetis.c
    sed -i 's/METIS_NodeND/SCOTCH_METIS_NodeND/' test_libmetis.c 

    make check

    printf "ptscotch test for %s\n" "${prgenv}"
    printf "(needs salloc for srun)\n"

    slurmAllocRun "make ptcheck"

    cd -
    module unload scotch
}

main

return 0
