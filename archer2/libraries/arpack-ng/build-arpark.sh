#!/usr/bin/env bash

set -e

script="$(readlink -fm "$0")"
script_dir="$(dirname "${script}")"
script_root="$(dirname "${script%/*/*}")"

source ${script_root}/pkgconfig-lib.sh
source ${script_root}/versions.sh
source ${script_root}/command_line.sh

function main {

    # Overall prefix must be supplied by command line

    local install_root=${prefix}/libs/arpack-ng/${ARPACK_VERSION}

    ${build_amd} && arpackBuildAocc ${install_root}
    ${build_cce} && arpackBuildCray ${install_root}
    ${build_gnu} && arpackBuildGnu  ${install_root}
    
    arpackInstallModuleFile
    arpackInstallationTest ${install_root}

    printf "ARCHER2: Arpack installation test completed successfully\n"
}

function arpackBuildAocc {

    local install_root=${1}

    # restore pe/compiler
    module restore $(moduleCollection PrgEnv-aocc)
    module swap aocc aocc/${PE_AOCC_AOCC_VERSION}
    module list

    amd_version=$(moduleToCompilerMajorMinor)
    amd_root=${install_root}/AOCC
    amd_prefix=${amd_root}/${amd_version}

    arpackBuild ${amd_prefix}
}

function arpackBuildCray {

    local install_root=${1}

    module restore $(moduleCollection PrgEnv-cray)
    module swap cce cce/${PE_CRAY_CCE_VERSION}
    module list

    cray_version=$(moduleToCompilerMajorMinor)
    cray_root=${install_root}/CRAYCLANG
    cray_prefix=${cray_root}/${cray_version}

    arpackBuild ${cray_prefix}
}

function arpackBuildGnu {    

    local install_root=${1}

    module restore $(moduleCollection PrgEnv-gnu)
    module swap gcc gcc/${PE_GNU_GCC_VERSION}
    module list

    gnu_version=$(moduleToCompilerMajorMinor)
    gnu_root=${install_root}/GNU
    gnu_prefix=${gnu_root}/${gnu_version}

    arpackBuild ${gnu_prefix}
}

function arpackBuild {

    local prefix=${1}
    
    # The single build produces both serial and MPI versions.

    arpackClean
    arpackBuildMPI ${prefix}

    # Remove pre-supplied arpack.ps parpack.pc
    rm ${prefix}/lib/pkgconfig/arpack.pc
    rm ${prefix}/lib/pkgconfig/parpack.pc

    arpackPackageConfigFiles ${prefix}

    # At the moment we are removing any shared objects
    rm ${prefix}/lib/lib*.so

    # Irksome: include/arpack/arpackdef.h is what none of the examples
    # expect. Add some links from include for each header?

    cd ${prefix}/include
    # Requires investigation
    cd -
}

function arpackClean {

    rm -rf arpack-ng-${ARPACK_VERSION}

}

function arpackBuildMPI {

    # The following libraries are generated by the build:
    # arpack.a parpack.a
    # (serial and parallel versions; there are no common symbols).

    local prefix=${1}

    ./sh/arpack-ng.sh --jobs=16 --prefix=${prefix} --version=${ARPACK_VERSION}

    local pe=$(peEnvLower)

    cd ${prefix}/lib

    mv libarpack.a libarpack_${pe}.a
    ln -s libarpack_${pe}.a libarpack.a
    ccSharedFromStatic ${prefix}/lib arpack_${pe}

    mv libparpack.a libparpack_${pe}_mpi.a
    ln -s libparpack_${pe}_mpi.a libparpack.a
    ccSharedFromStatic ${prefix}/lib parpack_${pe}_mpi

    cd -
}

function arpackPackageConfigFiles {

    # Here we declare the necessary information required to generate
    # pkgconfig files

    # Note PKGCONFIG file is "arpack" to simplify environment
    # in module file

    local prefix=${1}
    local prgEnv=$(peEnvLower)
    local ext="${prgEnv}"
    local extmpi="${prgEnv}_mpi"
    
    declare -A pcmap
    pcmap[name]="arpack-ng"
    pcmap[version]="${ARPACK_VERSION}"
    pcmap[description]="Arpack-NG library for ${prgEnv} compiler"
    pcmap[has_openmp]=0

    pcmap[requires]="parpack_${extmpi} arpack_${ext}"

    pcRefactorPackageConfigFiles ${prefix} pcmap
    pcFileWriteOverallPackageFile "${prefix}/lib/pkgconfig/arpack.pc" pcmap
}

function arpackInstallModuleFile {

    local module_template=${script_dir}/modulefile.tcl

    # Destination
    local module_dir=$(moduleInstallDirectory)
    local time_stamp=$(date)

    if [[ ! -d ${module_dir}/arpack-ng ]]; then
	mkdir ${module_dir}/arpack-ng
    fi

    local module_file=${module_dir}/arpack-ng/${ARPACK_VERSION}

    # Copy add update the template
    cp ${module_template} ${module_file}
    sed -i "s%TEMPLATE_INSTALL_ROOT%${prefix}%" ${module_file}
    sed -i "s%TEMPLATE_ARPACK_VERSION%${ARPACK_VERSION}%" ${module_file}
    sed -i "s%TEMPLATE_TIMESTAMP%${time_stamp}%" ${module_file}

    # Ensure this has worked
    module use ${module_dir}
    module load arpack-ng/${ARPACK_VERSION}
    module unload arpack-ng

}

function arpackInstallationTest {

    ${test_cce} && arpackTest PrgEnv-cray
    ${test_gnu} && arpackTest PrgEnv-gnu
    ${test_amd} && arpackTest PrgEnv-aocc

}

function arpackTest {

    local prgenv=${1}
    local module_use=$(moduleInstallDirectory)
    local version="${ARPACK_VERSION}"

    printf "Arpack-NG test for %s\n" "${prgenv}"
    module restore $(moduleCollection ${prgenv})
    module use ${module_use}

    module load arpack-ng/${version}
    printf "ARPACK_DIR: %s\n" "${ARPACK_DIR}"

    # Just try one simple example
    cd arpack-ng-${ARPACK_VERSION}/EXAMPLES/SIMPLE

    ftn sssimp.f
    ./a.out
    rm -f a.out

    cd -
    module unload arpack-ng
}

main
