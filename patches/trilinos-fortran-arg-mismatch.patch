Fix error from Gfortran 10, e.g.:

  trilinos-12.18.1-Source/packages/seacas/libraries/supes/mem_mgr/mdinit.F:680:37:

  232 |       MYLOC = IXLNUM (MYV)
      |                      2
      ......
  680 |             DPOINT(ROW,1,1) = IXLNUM(NEWLOC)
      |                                     1
  Error: Rank mismatch between actual argument at (1) and actual argument at (2) (rank-1 and scalar)

Taken from upstream fixes in
https://github.com/trilinos/Trilinos/commit/8d329b4c0213ff073c6efa40417c5997cfc9b2e7.

--- a/packages/seacas/libraries/supes/mem_mgr/mdinit.F
+++ b/packages/seacas/libraries/supes/mem_mgr/mdinit.F
@@ -229,7 +229,7 @@
 C     information is in terms of "MYV" since most operations are done
 C     with this base address.
 C
-      MYLOC = IXLNUM (MYV)
+      MYLOC = IXLNUM (MYV(1))
       ULOC = IXLNUM (USERV)
       OFFSET = MYLOC - ULOC
 C
--- a/packages/seacas/libraries/exodus_for/src/addrwrap.F
+++ b/packages/seacas/libraries/exodus_for/src/addrwrap.F
@@ -3323,7 +3323,7 @@
       integer*4 ierr4
 C
       idexo4 = idexo
-      call exgcor4 (idexo4, start_node_num, num_nodes, x_coor,
+      call exgncor4 (idexo4, start_node_num, num_nodes, x_coor,
      $  y_coor, z_coor, ierr4)
       ierr = ierr4
 C
@@ -3349,7 +3349,7 @@
       integer*4 ierr4
 C
       idexo4 = idexo
-      call expcor4 (idexo4, start_node_num, num_nodes, x_coor,
+      call expncor4 (idexo4, start_node_num, num_nodes, x_coor,
      $  y_coor, z_coor, ierr4)
       ierr = ierr4
 C
--- a/packages/seacas/applications/gjoin/gj_setitl.f
+++ b/packages/seacas/applications/gjoin/gj_setitl.f
@@ -141,7 +141,8 @@
 
       ELSE IF (VERB .EQ. 'CHANGE') THEN
          CALL GETINP (0, 0, 'New title> ', TITLE, IOSTAT)
-         CALL OUTLOG (KLOG, 1, 0, TITLE, IDUM, RDUM)
+         INTYP(1) = 0
+         CALL OUTLOG (KLOG, 1, INTYP, TITLE, IFIELD, RFIELD)
 
          GOTO 50
 
--- a/packages/seacas/applications/genshell/gs_show.f
+++ b/packages/seacas/applications/genshell/gs_show.f
@@ -145,7 +145,7 @@
          IF (ITRANT .EQ. 1) THEN
             CONTINUE
          ELSE IF (ITRANT .EQ. 4) THEN
-            CALL NUMSTR (1, 3, DWARP, RSTR(1), LR1)
+            CALL NUMSTR1 (3, DWARP, RSTR(1), LR1)
             IF (IWARP .EQ.  1) STRB = 'Point'
             IF (IWARP .EQ. -1) STRB = 'X Axis, Map to surface'
             IF (IWARP .EQ. -2) STRB = 'Y Axis, Map to surface'
@@ -240,7 +240,7 @@
          END IF
 
       ELSE IF (SHOTYP .EQ. 'ROTCEN') THEN
-         CALL NUMSTR (1, 4, CENTER, RSTR, LR)
+         CALL NUMSTR1 (4, CENTER, RSTR, LR)
          WRITE (*, 130)
      &      'Center of rotation = ',RSTR(1)(:LR)
 
--- a/packages/seacas/applications/gen3d/g3_show.f
+++ b/packages/seacas/applications/gen3d/g3_show.f
@@ -151,16 +151,17 @@
             CONTINUE
          ELSE IF (ITRANT .EQ. 2) THEN
             CALL INTSTR (1, 0, NEREPL, STRA, LSTRA)
-            CALL NUMSTR (1, 4, DIM3, RSTR(1), LR)
+            RNUM(1) = DIM3
+            RNUM(2) = RGRAD
+            CALL NUMSTR (2, 4, RNUM, RSTR(1), LR)
 
             IF (ABS (RGRAD - 1.0) .LE. 1.0E-6) THEN
                WRITE (*, 130) 'Rotate mesh ', STRA(:LSTRA),
      &            ' times for a total of ', RSTR(1)(:LR), ' degrees'
             ELSE
-               CALL NUMSTR (1, 3, RGRAD, RSTR(2), LR2)
                WRITE (*, 130) 'Rotate mesh ', STRA(:LSTRA),
      &            ' times for a total of ', RSTR(1)(:LR), ' degrees',
-     &            ' with a gradient of ', RSTR(2)(:LR2)
+     &            ' with a gradient of ', RSTR(2)(:LR)
             END IF
 
             if (rotax .eq. 0) then
@@ -181,12 +182,12 @@
                WRITE (*, 130) '   Center of rotation in ',
      &            STRA(:LSTRA), ' columns'
             ELSE
-               CALL NUMSTR (1, 4, CENTER, RSTR(1), LR)
+               CALL NUMSTR1 (4, CENTER, RSTR(1), LR)
                WRITE (*, 130) '   Center of rotation = ', RSTR(1)(:LR)
             END IF
 
          ELSE IF (ITRANT .EQ. 4) THEN
-            CALL NUMSTR (1, 3, DWARP, RSTR(1), LR1)
+            CALL NUMSTR1 (3, DWARP, RSTR(1), LR1)
             IF (IWARP .EQ.  1) STRB = 'Point'
             IF (IWARP .EQ. -1) STRB = 'X Axis'
             IF (IWARP .EQ. -2) STRB = 'Y Axis'
@@ -220,7 +221,7 @@
                WRITE (*, 130) '   Center of rotation in ',
      &            STRA(:LSTRA), ' columns'
             ELSE
-               CALL NUMSTR (1, 4, CENTER, RSTR(1), LR)
+               CALL NUMSTR1 (4, CENTER, RSTR(1), LR)
                WRITE (*, 130) '   Center of rotation = ', RSTR(1)(:LR)
             END IF
          ELSE IF (ITRANT .EQ. 64) THEN
@@ -292,7 +293,7 @@
          END IF
 
       ELSE IF (SHOTYP .EQ. 'ROTCEN') THEN
-         CALL NUMSTR (1, 4, CENTER, RSTR, LR)
+         CALL NUMSTR1 (4, CENTER, RSTR, LR)
          WRITE (*, 130)
      &      'Center of rotation = ',RSTR(1)(:LR)
 
--- a/packages/seacas/libraries/suplib/CMakeLists.txt
+++ b/packages/seacas/libraries/suplib/CMakeLists.txt
@@ -33,6 +33,7 @@
   intstr.f
   lowstr.f
   numstr.f
+  numstr1.f
   ran1.f
   argparse.F
   cpyint.f
--- a/packages/seacas/libraries/suplib/numstr1.f
+++ b/packages/seacas/libraries/suplib/numstr1.f
@@ -0,0 +1,230 @@
+C     Copyright(C) 2009-2017 National Technology & Engineering Solutions
+C     of Sandia, LLC (NTESS).  Under the terms of Contract DE-NA0003525 with
+C     NTESS, the U.S. Government retains certain rights in this software.
+C     
+C     Redistribution and use in source and binary forms, with or without
+C     modification, are permitted provided that the following conditions are
+C     met:
+C     
+C     * Redistributions of source code must retain the above copyright
+C     notice, this list of conditions and the following disclaimer.
+C     
+C     * Redistributions in binary form must reproduce the above
+C     copyright notice, this list of conditions and the following
+C     disclaimer in the documentation and/or other materials provided
+C     with the distribution.
+C     
+C     * Neither the name of NTESS nor the names of its
+C     contributors may be used to endorse or promote products derived
+C     from this software without specific prior written permission.
+C     
+C     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+C     "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+C     LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+C     A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+C     OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+C     SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+C     LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+C     DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+C     THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+C     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+C     OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+C=======================================================================
+      SUBROUTINE NUMSTR1 (NSIG, RNUM, RSTR, LSTR)
+C=======================================================================
+
+C     --*** NUMSTR *** (STRLIB) Convert real numbers to strings
+C     --
+C     --NUMSTR converts a set of real numbers into a consistent set of
+C     --strings.  It will convert to engineering notation with all
+C     --exponents the same, if possible.
+C     --
+C     --Parameters:
+C     --   NSIG - IN - the maximum number of significant digits, max of 8
+C     --   RNUM - IN - the array of real numbers to be converted
+C     --   RSTR - OUT - the set of real number strings
+C     --   LSTR - OUT - the maximum length of the number strings
+
+C     --Routines Called:
+C     --   IENGRX - (included) Get engineering notation exponent
+
+      INTEGER NSIG
+      REAL RNUM
+      CHARACTER*(*) RSTR
+      INTEGER LSTR
+
+      CHARACTER*20 BLANKS
+      CHARACTER*10 SCRFMT
+      CHARACTER*20 SCRSTR
+      CHARACTER*20 TMPSTR
+      CHARACTER*15 FFMT
+
+C     --Convert all to E notation and find the minimum and maximum exponent
+C     --   MINE and MAXE are the minimum and maximum exponents
+C     --   ISIGN is the number of digits for the sign
+C     --      (0 if all positive, 1 if any number negative)
+
+      BLANKS = ' '
+
+      WRITE (SCRFMT, 10000, IOSTAT=IDUM) NSIG+7, NSIG
+10000 FORMAT ('(0PE', I2.2, '.', I2.2, ')')
+
+      ISIGN = 0
+      MINE  = 9999
+      MINE2 = 9999
+      MAXE  = -9999
+      MAXES = MAXE
+      IF (RNUM .NE. 0.0) THEN
+         WRITE (SCRSTR(1:NSIG+7), SCRFMT, IOSTAT=IDUM) RNUM
+         READ (SCRSTR(NSIG+5:NSIG+7), '(I3)', IOSTAT=IDUM) IE
+         IF (MINE .GT. IE) MINE2 = MINE
+         MINE = MIN (MINE, IE)
+         MAXE = MAX (MAXE, IE)
+         IF (RNUM .LT. 0.0) THEN
+            ISIGN = 1
+            MAXES = MAX (MAXES, IE)
+         END IF
+      END IF
+
+C     --Correct for one very small number (should be zero)
+
+      IF ((MINE2 .LT. 1000) .AND. ((MINE2 - MINE) .GE. 6)) MINE = MINE2
+
+C     --Handle all zero case
+
+      IF (MINE .GT. MAXE) THEN
+         MINE = 0
+         MAXE = 0
+         MAXES = 0
+      END IF
+
+C     --Determine the new exponent NEWEXP (use engineering notation)
+
+      NEWEXP = IENGRX (MAXE, MINE)
+      IF (ISIGN .EQ. 1) THEN
+         IF (MAX (1, MAXE - NEWEXP) .GT. MAX (1, MAXES - NEWEXP))
+     &        ISIGN = 0
+      END IF
+
+C     --Check if the numbers can all be sensibly converted to a common exponent
+
+      IF (((MAXE - NEWEXP) .LE. 4)
+     &     .AND. ((NEWEXP - MINE) .LE. 2)
+     &     .AND. (-MINE .LT. (NSIG - MAXE))) THEN
+
+C     --Determine the new F format
+C     --   EXPDIV is the number to divide by to get the number
+C     --      without an exponent
+C     --   NWHOLE is the number of digits before the decimal
+C     --   NFRAC is the number of digits after the decimal
+C     --   NTOTAL is the total number of digits
+C     --The new exponent is tagged on the end of the F-format number
+
+         EXPDIV = 10.0 ** NEWEXP
+
+         NWHOLE = MAX (1, MAXE - NEWEXP)
+         NFRAC = MAX (0, MIN (NEWEXP - MINE + NSIG,
+     &        NSIG - (MAXE - NEWEXP)))
+         NTOTAL = ISIGN + NWHOLE + 1 + NFRAC
+         IF (EXPDIV .NE. 0.0) THEN
+            WRITE (FFMT, 10010, IOSTAT=IDUM) NTOTAL, NFRAC
+10010       FORMAT ('(F', I2.2, '.', I2.2, ')')
+         ELSE
+            WRITE (FFMT, 10020, IOSTAT=IDUM) NTOTAL
+10020       FORMAT ('(A', I2.2, 3X, ')')
+         END IF
+
+         IF (NEWEXP .EQ. 0) THEN
+            LSTR = NTOTAL
+         ELSE IF ((NEWEXP .LE. -10) .OR. (NEWEXP .GE. 10)) THEN
+            WRITE (FFMT(8:15), 10030, IOSTAT=IDUM) NEWEXP
+10030       FORMAT (',''E', SP, I3.2, ''')')
+            LSTR = NTOTAL + 4
+         ELSE
+            WRITE (FFMT(8:15), 10040, IOSTAT=IDUM) NEWEXP
+10040       FORMAT (',''E', SP, I2.1, ''')')
+            LSTR = NTOTAL + 3
+         END IF
+
+C     --Convert all numbers to the new exponent by using the F format
+
+         IF (EXPDIV .NE. 0.0) THEN
+            WRITE (RSTR, FFMT, IOSTAT=IDUM) RNUM/EXPDIV
+            if (rstr(:1) .eq. '*') then
+C     ... Roundoff occurred. Adjust format and try again...
+               IF (EXPDIV .NE. 0.0) THEN
+                  WRITE (FFMT(:7), 10010, IOSTAT=IDUM) NTOTAL,
+     $                 NFRAC-1
+                  WRITE (RSTR, FFMT, IOSTAT=IDUM) RNUM/EXPDIV
+               end if
+            end if
+         ELSE
+            WRITE (RSTR, FFMT, IOSTAT=IDUM) '********************'
+         END IF
+
+      ELSE
+
+C     --Do not try to use a common exponent, but use engineering notation;
+C     --Algorithm as above
+
+         LSTR = 0
+         MINEXP = IENGRX (MINE, MINE)
+         MAXEXP = IENGRX (MAXE, MAXE)
+
+         WRITE (SCRSTR(1:NSIG+7), SCRFMT, IOSTAT=IDUM) RNUM
+         READ (SCRSTR(NSIG+5:NSIG+7), '(I3)', IOSTAT=IDUM) IE
+         ISIGN = 0
+         IF (RNUM .LT. 0.0) ISIGN = 1
+
+         NEWEXP = IENGRX (IE, IE)
+
+         EXPDIV = 10.0 ** NEWEXP
+
+         NWHOLE = MAX (1, IE - NEWEXP)
+         NFRAC = MAX (0, MIN (NEWEXP - IE + NSIG,
+     &        NSIG - (IE - NEWEXP)))
+         IF ((RNUM .EQ. 0.0) .AND. (MINE .GE. 0))
+     &        NFRAC = NFRAC - 1
+         NTOTAL = ISIGN + NWHOLE + 1 + NFRAC
+         IF (EXPDIV .NE. 0.0) THEN
+            WRITE (FFMT, 10010, IOSTAT=IDUM) NTOTAL, NFRAC
+         ELSE
+            WRITE (FFMT, 10020, IOSTAT=IDUM) NTOTAL
+         END IF
+
+         IF ((MINEXP .LE. -10) .OR. (MAXEXP .GE. 10)) THEN
+            WRITE (FFMT(8:15), 10030, IOSTAT=IDUM) NEWEXP
+            LSTR = MAX (LSTR, NTOTAL + 4)
+         ELSE
+            WRITE (FFMT(8:15), 10040, IOSTAT=IDUM) NEWEXP
+            LSTR = MAX (LSTR, NTOTAL + 3)
+         END IF
+
+         IF (EXPDIV .NE. 0.0) THEN
+            WRITE (RSTR, FFMT, IOSTAT=IDUM) RNUM/EXPDIV
+            if (rstr(:1) .eq. '*') then
+C     ... Roundoff occurred. Adjust format and try again...
+               IF (EXPDIV .NE. 0.0) THEN
+                  WRITE (FFMT(:7), 10010, IOSTAT=IDUM) NTOTAL,
+     $                 NFRAC-1
+                  WRITE (RSTR, FFMT, IOSTAT=IDUM) RNUM/EXPDIV
+               end if
+            end if
+         ELSE
+            WRITE (RSTR, FFMT, IOSTAT=IDUM) '********************'
+         END IF
+
+C     --Adjust the strings so that they are right-justified at
+C     --a common length
+
+         IB = INDEX (RSTR(:LSTR), ' ')
+         IF (IB .GT. 0) THEN
+            NB = LSTR - IB + 1
+            TMPSTR = RSTR(:IB-1)
+            RSTR = BLANKS(:NB) // TMPSTR
+         END IF
+
+      END IF
+
+      RETURN
+      END
--- a/packages/seacas/applications/explore/exp_prtims.f
+++ b/packages/seacas/applications/explore/exp_prtims.f
@@ -82,7 +82,7 @@
      &   .AND. (NSTEPS .GT. 0)) THEN
          CALL MINMAX (NSTEPS, TIMES, TIMMIN, TIMMAX)
          IF (NSTEPS .EQ. 1) THEN
-            CALL NUMSTR (1, NPREC, TIMMIN, RSTR, LSTR)
+            CALL NUMSTR1 (NPREC, TIMMIN, RSTR, LSTR)
             WRITE (STRING, 10040) 'Time = ', RSTR(1)(:LSTR)
             LSTR = LENSTR (STRING)
             IF (NOUT .GT. 0) THEN
--- a/packages/seacas/applications/grepos/gp_show.f
+++ b/packages/seacas/applications/grepos/gp_show.f
@@ -200,9 +200,9 @@
       ELSE IF (SHOTYP .EQ. 'SMOOTH') THEN
         write (*, 40)
      $    'Smoothing Type = LAPLACIAN'
-        call numstr (1, 4, TOLER, RSTR(1), LR1)
+        call numstr1 (4, TOLER, RSTR(1), LR1)
         call intstr (1, 0, NIT,   STRA,    LR2)
-        call numstr (1, 4, R0,    RSTR(3), LR3)
+        call numstr1 (4, R0,    RSTR(3), LR3)
         write (*, 40)
      $    'Tolerance      = ',RSTR(1)(:LR1)
         write (*, 40)
@@ -219,8 +219,7 @@
 
       ELSE IF (SHOTYP .EQ. 'EQUIVALENCE') THEN
          IF (EQUIV) THEN
-            RNUM(1) = EQTOLER
-            CALL NUMSTR (1, 6, RNUM, RSTR, LR)
+            CALL NUMSTR1 (6, EQTOLER, RSTR, LR)
             WRITE (*, 40)
      &           'Node Equivalence Tolerance = ', RSTR(1)(:LR)
          ELSE
@@ -233,8 +232,8 @@
           do i=1, numsnp
             call intstr(1, 0, IDSSSL(i), STRA,  LR1)
             call intstr(1, 0, IDSSMA(i), STRB,  LR2)
-            call numstr(1, 4, snptol(i), RSTR(4), LR4)
-            call numstr(1, 4, delmax(i), RSTR(5), LR5)
+            call numstr1(4, snptol(i), RSTR(4), LR4)
+            call numstr1(4, delmax(i), RSTR(5), LR5)
             if (usnorm(i) .eq. PNORM) then
               string = 'normal to slave surf'
             else if (usnorm(i) .eq. PRAD) then
@@ -260,7 +259,7 @@
      *          ' max delta ', RSTR(5)(:LR5)
             else
               call numstr(3, 4, VECTOR(1,i), RSTR,  LR3)
-              call numstr(1, 4, gap(i), RSTR(6), LR6)
+              call numstr1(4, gap(i), RSTR(6), LR6)
               write (*, 40) SMTYP(:4), ' Sideset ', STRA(:LR1),
      *          ' to ', STRB(:LR2),' ',
      *          STRING(:LENSTR(STRING)),' ',
@@ -295,7 +294,7 @@
           RSTR(2) = 'Z axis'
         END IF
 
-        CALL NUMSTR (1, 4, WRPDIS, RSTR, LR)
+        CALL NUMSTR1 (4, WRPDIS, RSTR, LR)
 
         WRITE (*, 40) 'Warp mesh about the ', STRING(:LENSTR(STRING)),
      *    ', Reference Radius = ', RSTR(1)(:LR), ', Normal Vector = ',
--- a/packages/seacas/applications/grepos/grepos.f
+++ b/packages/seacas/applications/grepos/grepos.f
@@ -695,7 +695,7 @@
             IF (NERR .GT. 0) GOTO 40
             CALL CPYINT (NELBLK0, IA(KNELB),  IA(KNELB0))
             CALL CPYINT (NELBLK0, IA(KIDELB2), IA(KIDELB0))
-            CALL CPYINT (LIEVOK,  LA(KIEVOK), LA(KIEVOK0))
+            CALL CPYINT (LIEVOK,  IA(KIEVOK), IA(KIEVOK0))
          END IF
 
          CALL MDRSRV ('IXEL', KIXEL, NUMEL)
@@ -726,7 +726,7 @@
 C     ... Fix up the truth table if the element block count changes...
          if (exodus .and. nvarel .gt. 0 .and. nelblk .ne. nelblk0) then
             call muntt(nelblk0, nelblk, nvarel,
-     $           la(kievok0), la(kievok), ia(kielbs))
+     $           ia(kievok0), ia(kievok), ia(kielbs))
          end if
 
          CALL MDDEL ('LINKO')
--- a/packages/seacas/applications/numbers/nu_command.f
+++ b/packages/seacas/applications/numbers/nu_command.f
@@ -43,7 +43,7 @@
       INTEGER IA(*)
       DIMENSION A(*), TIME(*), MAT(6,*), DISP(NUMNP,*), CRD(NUMNP,*),
      *   LINK(*), DENSTY(*), WAVE(*)
-      LOGICAL ITMSEL(*), ISEVOK(*)
+      INTEGER ITMSEL(*), ISEVOK(*)
       CHARACTER*(MXSTLN) NAMEGL(*), NAMENV(*), NAMEEL(*)
       CHARACTER*(MXLNLN) INFREC(*)
       CHARACTER*(MXSTLN) QAREC(4,*)
--- a/packages/seacas/applications/grepos/gp_comand.F
+++ b/packages/seacas/applications/grepos/gp_comand.F
@@ -1794,7 +1794,7 @@
 C========================================================================
       ELSE IF (VERB .EQ. 'TMIN') then
          call ffreal (ifld, intyp, rfield,
-     $    'Minimum Time', 0, tmin, *345)
+     $    'Minimum Time', 0.0, tmin, *345)
          do itim = 1, nsteps
             if (times(itim) .lt. tmin) then
                itimst(itim) = 1
@@ -1805,7 +1805,7 @@
 C========================================================================
       ELSE IF (VERB .EQ. 'TMAX') then
          call ffreal (ifld, intyp, rfield,
-     $    'Maximum Time', 0, tmax, *346)
+     $    'Maximum Time', 0.0, tmax, *346)
          do itim = 1, nsteps
             if (times(itim) .gt. tmax) then
                itimst(itim) = 1
--- a/packages/seacas/applications/numbers/nu_stimes.f
+++ b/packages/seacas/applications/numbers/nu_stimes.f
@@ -117,7 +117,7 @@
             CALL MINMAX (NSTEPS, TIMES, TIMMIN, TIMMAX)
          END IF
          IF (NSTEPX .EQ. 1) THEN
-            CALL NUMSTR (1, 4, TIMMIN, RSTR, LSTR)
+            CALL NUMSTR1 (4, TIMMIN, RSTR, LSTR)
             IF (ALLPRT) THEN
                WRITE (*, 10030) '   Time = ', RSTR(1)(:LSTR)
             ELSE
--- a/packages/seacas/applications/algebra/ag_rweval.f
+++ b/packages/seacas/applications/algebra/ag_rweval.f
@@ -566,14 +566,14 @@
             RETURN
           END IF
 
-          CALL EXGCNS(ndbin, a(kidns), a(knnns), a(kndnps),
-     &      a(kixnns), a(kdisns), a(kltnns), a(kfacns), ierr)
+          CALL EXGCNS(ndbin, ia(kidns), ia(knnns), ia(kndnps),
+     &      ia(kixnns), ia(kdisns), ia(kltnns), a(kfacns), ierr)
         END IF
       END IF
 C     Write the node set information
       if ((numnps .gt. 0) .AND. (nnpso .gt. 0)) then
-        CALL EXPCNS(ndbout, a(kidns), a(knnns), a(kndnps),
-     &    a(kixnns), a(kdisns), a(kltnns), a(kfacns), ierr)
+        CALL EXPCNS(ndbout, ia(kidns), ia(knnns), ia(kndnps),
+     &    ia(kixnns), ia(kdisns), ia(kltnns), a(kfacns), ierr)
 
 C       Delete unneeded dynamic memory
         CALL MDDEL ('IDNPS')
--- a/packages/seacas/applications/algebra/ag_show.f
+++ b/packages/seacas/applications/algebra/ag_show.f
@@ -191,8 +191,8 @@
 
       ELSE IF (SHOTYP .EQ. 'FILTER') THEN
          IF (ISFILTER) THEN
-           CALL NUMSTR (1, 4, VALFLT, RSTR(1), LSTR1)
-           CALL NUMSTR (1, 4, TIMFLT, RSTR(2), LSTR2)
+           CALL NUMSTR1 (4, VALFLT, RSTR(1), LSTR1)
+           CALL NUMSTR1 (4, TIMFLT, RSTR(2), LSTR2)
            if (cmpflt .eq. 1) RSTR(3) = 'lt'
            if (cmpflt .eq. 2) RSTR(3) = 'le'
            if (cmpflt .eq. 3) RSTR(3) = 'eq'
