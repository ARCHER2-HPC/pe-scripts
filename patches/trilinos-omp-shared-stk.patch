This patch fixes errors from CCE of the form::

./packages/stk/stk_search/stk_search/KDTree_impl.hpp:1257:28: error: variable 'num_boxes' must
       have explicitly specified data sharing attributes
  for(int ibox = 0; ibox < num_boxes; ++ibox) {
                           ^~~~~~~~~

GCC interprets 'const' variables as implicetly "shared", but other
compilers may behave differently.

diff --git a/packages/epetra/src/Epetra_MultiVector.cpp b/packages/epetra/src/Epetra_MultiVector.cpp
index f55de2f..f6e73ee 100644
--- a/packages/stk/stk_search/stk_search/KDTree_impl.hpp
+++ b/packages/stk/stk_search/stk_search/KDTree_impl.hpp
@@ -122,7 +122,7 @@ static inline void split_boxes_threaded(const int num_boxes, const stk::search::
   }
 
 #ifdef _OPENMP
-#pragma omp parallel for reduction(+: global_center_x, global_center_y, global_center_z, moment_x, moment_y, moment_z) schedule(static) default(none) num_threads(numThreadsToUse)
+#pragma omp parallel for reduction(+: global_center_x, global_center_y, global_center_z, moment_x, moment_y, moment_z) schedule(static) default(none) num_threads(numThreadsToUse) shared(num_boxes, boxes)
 #endif
   for(int ibox = 0; ibox < num_boxes; ++ibox) {
     float centroid[3];
@@ -814,7 +814,7 @@ inline void create_hierarchy(ObjectBoundingBoxHierarchy_T<RangeBoxType> *hierarc
   std::vector< std::pair<float,int> > centroid_y(num_boxes);
   std::vector< std::pair<float,int> > centroid_z(num_boxes);
 #ifdef _OPENMP
-#pragma omp parallel for schedule(static) default(none) shared(centroid_x, centroid_y, centroid_z, boxes)
+#pragma omp parallel for schedule(static) default(none) shared(centroid_x, centroid_y, centroid_z, boxes, num_boxes)
 #endif
   for(int ibox = 0; ibox < num_boxes; ++ibox) {
     float centroid[3];
@@ -835,7 +835,7 @@ inline void create_hierarchy(ObjectBoundingBoxHierarchy_T<RangeBoxType> *hierarc
 
 #ifdef _OPENMP
 
-#pragma omp parallel for schedule(static) default(none) shared(centroid_x, centroid_y, centroid_z, index_array0, index_array1, index_array2)
+#pragma omp parallel for schedule(static) default(none) shared(centroid_x, centroid_y, centroid_z, index_array0, index_array1, index_array2, num_boxes)
 #endif
   for(int ibox = 0; ibox < num_boxes; ++ibox) {
     index_array0[ibox] = centroid_x[ibox].second;
@@ -1022,7 +1022,7 @@ void create_hierarchy_partial(ObjectBoundingBoxHierarchy_T<RangeBoxType> *const
   //  Resort the boxes based off of the master array.  First use the new master_sindex array to story a mapping between old box 
   //  positions and new box positions.
   //
-#pragma omp parallel for schedule(static) default(none) shared(master_index, master_sindex)
+#pragma omp parallel for schedule(static) default(none) shared(master_index, master_sindex, boxes_start_ptr, scratch_boxes_start_ptr, num_boxes)
   for(int ibox = 0; ibox < num_boxes; ++ibox) {
     //  NKC, try memcopy
     const int index = master_index[ibox];
@@ -1034,7 +1034,7 @@ void create_hierarchy_partial(ObjectBoundingBoxHierarchy_T<RangeBoxType> *const
   //  Use at most just four threads here, one starting from the left and one from the right,
   //  can't think of any better way to exploit threading for this particular case
   //
-#pragma omp parallel sections default(none) shared(master_sindex, sub_index1, sub_sindex1, sub_index2, sub_sindex2)
+#pragma omp parallel sections default(none) shared(master_sindex, sub_index1, sub_sindex1, sub_index2, sub_sindex2, num_boxes, left_child_size)
   {
   #pragma omp section
     {
@@ -1098,11 +1098,11 @@ void create_hierarchy_partial(ObjectBoundingBoxHierarchy_T<RangeBoxType> *const
   //
   //  Update the master index to be correct with the new box ordering
   //
-#pragma omp parallel for schedule(static) default(none) shared(master_sindex)
+#pragma omp parallel for schedule(static) default(none) shared(master_sindex, left_child_size)
   for(int ibox = 0; ibox < left_child_size; ++ibox) {
     master_sindex[ibox] = ibox;
   }
-#pragma omp parallel for schedule(static) default(none) shared(master_sindex)
+#pragma omp parallel for schedule(static) default(none) shared(master_sindex, left_child_size, num_boxes)
   for(int ibox = left_child_size; ibox < num_boxes; ++ibox) {
     master_sindex[ibox] = ibox - left_child_size;
   }
@@ -1253,7 +1253,7 @@ inline void create_hierarchy_fork_threaded(ObjectBoundingBoxHierarchy_T<RangeBox
   //  need to remain in sorted order and are partioned with the below code.
   //
 
-#pragma omp parallel for schedule(static) num_threads(numThreadsToUse) default(none) shared(master_index, master_sindex)
+#pragma omp parallel for schedule(static) num_threads(numThreadsToUse) default(none) shared(master_index, master_sindex, num_boxes, scratch_boxes_start_ptr, boxes_start_ptr)
   for(int ibox = 0; ibox < num_boxes; ++ibox) {
     const int index = master_index[ibox];
     scratch_boxes_start_ptr[ibox] = boxes_start_ptr[index];
@@ -1264,7 +1264,7 @@ inline void create_hierarchy_fork_threaded(ObjectBoundingBoxHierarchy_T<RangeBox
   //  Use at most just four threads here, one starting fro the left and one from the right of each of the lists
   //  can't think of any better way to exploit threading any more for this particular operation
   //
-#pragma omp parallel sections num_threads(numThreadsToUse) default(none) shared(master_sindex, sub_index1, sub_sindex1, sub_index2, sub_sindex2)
+#pragma omp parallel sections num_threads(numThreadsToUse) default(none) shared(master_sindex, sub_index1, sub_sindex1, sub_index2, sub_sindex2, left_child_size, num_boxes)
   {
   #pragma omp section
     {
@@ -1328,11 +1328,11 @@ inline void create_hierarchy_fork_threaded(ObjectBoundingBoxHierarchy_T<RangeBox
   //
   //  Update the master index to be correct with the new box ordering
   //
-#pragma omp parallel for schedule(static) num_threads(numThreadsToUse) default(none) shared(master_sindex)
+#pragma omp parallel for schedule(static) num_threads(numThreadsToUse) default(none) shared(master_sindex, left_child_size)
   for(int ibox = 0; ibox < left_child_size; ++ibox) {
     master_sindex[ibox] = ibox;
   }
-#pragma omp parallel for schedule(static) num_threads(numThreadsToUse) default(none) shared(master_sindex)
+#pragma omp parallel for schedule(static) num_threads(numThreadsToUse) default(none) shared(master_sindex, left_child_size, num_boxes)
   for(int ibox = left_child_size; ibox < num_boxes; ++ibox) {
     master_sindex[ibox] = ibox - left_child_size;
   }
@@ -1349,7 +1349,7 @@ inline void create_hierarchy_fork_threaded(ObjectBoundingBoxHierarchy_T<RangeBox
   int rightNumThreads = numThreadsToUse/2;
   int leftNumThreads = numThreadsToUse-rightNumThreads;
 
-#pragma omp parallel sections num_threads(2) default(none), shared(leftNumThreads, rightNumThreads)
+#pragma omp parallel sections num_threads(2) default(none), shared(leftNumThreads, rightNumThreads, right_child_offset1, index_array0_t_start_ptr, left_child_size, right_child_size, scratch_boxes_start_ptr, index_array2_t_start_ptr, hierarchy_start_ptr, index_array1_t_start_ptr, sindex_array2_t_start_ptr, sindex_array1_t_start_ptr, sindex_array0_t_start_ptr, boxes_start_ptr)
   {
 #pragma omp section
     {
